package db

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestSimpleAdd(t *testing.T) {
	require := require.New(t)
	newBytes, err := eavSet(MakeEAVEmptyRecord(), EAVPack(0, 0, false, []byte("hello")))
	require.Nil(err)
	require.Equal([]byte{
		0x0,      // version
		0x0, 0x1, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // time
		'h', 'e', 'l', 'l', 'o',
	}, newBytes)
}

func TestSimpleNewValue(t *testing.T) {
	require := require.New(t)
	newBytes, err := eavSet(MakeEAVEmptyRecord(), EAVPack(0, 0, false, []byte("hello")))
	require.Nil(err)
	newBytes, err = eavSet(newBytes, EAVPack(0, 1, false, []byte("there!")))
	require.Nil(err)
	require.Equal([]byte{
		0x0,      // version
		0x0, 0x1, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x6, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // time
		't', 'h', 'e', 'r', 'e', '!',
	}, newBytes)
}

func TestSimpleOldValue(t *testing.T) {
	require := require.New(t)
	newBytes, err := eavSet(MakeEAVEmptyRecord(), EAVPack(0, 1, false, []byte("hello")))
	require.Nil(err)
	newBytes, err = eavSet(newBytes, EAVPack(0, 0, false, []byte("there!")))
	require.Nil(err)
	require.Equal([]byte{
		0x0,      // version
		0x0, 0x1, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // time
		'h', 'e', 'l', 'l', 'o',
	}, newBytes)
}

func TestDoubleValue(t *testing.T) {
	require := require.New(t)
	newBytes, err := eavSet([]byte{
		0x0,      // version
		0x0, 0x1, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // time
		'h', 'e', 'l', 'l', 'o',
	}, EAVPack(1, 1, false, []byte("there!")))
	require.Nil(err)
	require.Equal([]byte{
		0x0,      // version
		0x0, 0x2, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x1, // name index
		0x0, 0x0, 0x0, 0x11, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // time
		'h', 'e', 'l', 'l', 'o',
		0x0, 0x0, 0x0, 0x6, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // time
		't', 'h', 'e', 'r', 'e', '!',
	}, newBytes)
}

func TestGetValue(t *testing.T) {
	require := require.New(t)
	rec := []byte{
		0x0,      // version
		0x0, 0x2, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x1, // name index
		0x0, 0x0, 0x0, 0x11, // pos
		0x0,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // time
		'h', 'e', 'l', 'l', 'o',
		0x0, 0x0, 0x0, 0x6, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // time
		't', 'h', 'e', 'r', 'e', '!',
	}
	b1, err := eavGet(rec, 0)
	require.Nil(err)
	b2, err := eavGet(rec, 1)
	require.Nil(err)
	require.Equal([]byte("hello"), b1)
	require.Equal([]byte("there!"), b2)
}

func TestGetNullValue(t *testing.T) {
	require := require.New(t)
	b, err := eavGet([]byte{
		0x0,      // version
		0x0, 0x1, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x1,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // time
		'h', 'e', 'l', 'l', 'o',
	}, 0)
	require.Nil(err)
	require.Equal(nil, b)
}

func TestHasValue(t *testing.T) {
	in := []byte{
		0x0,      // version
		0x0, 0x2, // count
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // mtime
		0x0, 0x0, 0x0, 0x0, // name index
		0x0, 0x0, 0x0, 0x0, // pos
		0x1,                // flag
		0x0, 0x0, 0x0, 0x1, // name index
		0x0, 0x0, 0x0, 0x11, // pos
		0x1,                // flag
		0x0, 0x0, 0x0, 0x5, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // time
		'h', 'e', 'l', 'l', 'o',
		0x0, 0x0, 0x0, 0x6, // len
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // time
		't', 'h', 'e', 'r', 'e', '!',
	}
	c, err := eavHas(in, 0, 1)
	if err != nil {
		t.Fatalf("error %#v", err)
	}
	if c != 1 {
		t.Fatalf("expected a match")
	}

	c, err = eavHas(in, 0, 1, 2)
	if err != nil {
		t.Fatalf("error %#v", err)
	}
	if c != 0 {
		t.Fatalf("expected not a match")
	}
}
